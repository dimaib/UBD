
Accel_LIS302.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d00  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000d00  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  008000ba  008000ba  00000e0e  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00000e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00000eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001826  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000076e  00000000  00000000  00002806  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c6d  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000248  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000552  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f99  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00005317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	ca c2       	rjmp	.+1428   	; 0x5a0 <__vector_5>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	9d c2       	rjmp	.+1338   	; 0x54e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	03 c2       	rjmp	.+1030   	; 0x41e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e0       	ldi	r30, 0x00	; 0
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 3b       	cpi	r26, 0xBA	; 186
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	aa eb       	ldi	r26, 0xBA	; 186
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 32       	cpi	r26, 0x2B	; 43
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c7 d2       	rcall	.+1422   	; 0x5e8 <main>
  5a:	50 c6       	rjmp	.+3232   	; 0xcfc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <aver_arr>:
	#define BAUDRATE 9600
	UBRRH = ((unsigned)(F_CPU / (16.0 * BAUDRATE) - 1) >> 8) & 0x0F;
	UBRRL = ((unsigned)(F_CPU / (16.0 * BAUDRATE) - 1) >> 0) & 0xFF;
	UCSRB = 1<<RXEN|1<<TXEN|1<<RXCIE|0<<TXCIE;				//разрешение приёма и передачи. Разрешение прерывания по приёму байта
	UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1|0<<UCSZ2|0<<UPM0|0<<UPM1|0<<USBS;
	sei();													//разрешение перываний
  5e:	dc 01       	movw	r26, r24
  60:	26 2f       	mov	r18, r22
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	fc 01       	movw	r30, r24
  66:	ac 01       	movw	r20, r24
  68:	4d 5f       	subi	r20, 0xFD	; 253
  6a:	5f 4f       	sbci	r21, 0xFF	; 255
  6c:	91 81       	ldd	r25, Z+1	; 0x01
  6e:	91 93       	st	Z+, r25
  70:	29 0f       	add	r18, r25
  72:	31 1d       	adc	r19, r1
  74:	e4 17       	cp	r30, r20
  76:	f5 07       	cpc	r31, r21
  78:	c9 f7       	brne	.-14     	; 0x6c <aver_arr+0xe>
  7a:	13 96       	adiw	r26, 0x03	; 3
  7c:	6c 93       	st	X, r22
  7e:	c9 01       	movw	r24, r18
  80:	96 95       	lsr	r25
  82:	87 95       	ror	r24
  84:	96 95       	lsr	r25
  86:	87 95       	ror	r24
  88:	08 95       	ret

0000008a <i2c_stop_cond>:
  8a:	a4 9a       	sbi	0x14, 4	; 20
  8c:	8a e1       	ldi	r24, 0x1A	; 26
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <i2c_stop_cond+0x4>
  92:	00 c0       	rjmp	.+0      	; 0x94 <i2c_stop_cond+0xa>
  94:	a5 9a       	sbi	0x14, 5	; 20
  96:	8a e1       	ldi	r24, 0x1A	; 26
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <i2c_stop_cond+0xe>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <i2c_stop_cond+0x14>
  9e:	a4 98       	cbi	0x14, 4	; 20
  a0:	8a e1       	ldi	r24, 0x1A	; 26
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <i2c_stop_cond+0x18>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <i2c_stop_cond+0x1e>
  a8:	a5 98       	cbi	0x14, 5	; 20
  aa:	8a e1       	ldi	r24, 0x1A	; 26
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <i2c_stop_cond+0x22>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <i2c_stop_cond+0x28>
  b2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <i2c_frame_error>
  b6:	9d 99       	sbic	0x13, 5	; 19
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <i2c_stop_cond+0x3a>
  ba:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <i2c_frame_error>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <i2c_frame_error>
  c4:	9c 99       	sbic	0x13, 4	; 19
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <i2c_stop_cond+0x48>
  c8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <i2c_frame_error>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <i2c_frame_error>
  d2:	8a e1       	ldi	r24, 0x1A	; 26
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <i2c_stop_cond+0x4a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <i2c_stop_cond+0x50>
  da:	8a e1       	ldi	r24, 0x1A	; 26
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <i2c_stop_cond+0x52>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <i2c_stop_cond+0x58>
  e2:	8a e1       	ldi	r24, 0x1A	; 26
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <i2c_stop_cond+0x5a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <i2c_stop_cond+0x60>
  ea:	8a e1       	ldi	r24, 0x1A	; 26
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <i2c_stop_cond+0x62>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <i2c_stop_cond+0x68>
  f2:	08 95       	ret

000000f4 <i2c_init>:
  f4:	a5 98       	cbi	0x14, 5	; 20
  f6:	a4 98       	cbi	0x14, 4	; 20
  f8:	ad 98       	cbi	0x15, 5	; 21
  fa:	ac 98       	cbi	0x15, 4	; 21
  fc:	c6 df       	rcall	.-116    	; 0x8a <i2c_stop_cond>
  fe:	c5 df       	rcall	.-118    	; 0x8a <i2c_stop_cond>
 100:	08 95       	ret

00000102 <i2c_start_cond>:
 102:	a5 9a       	sbi	0x14, 5	; 20
 104:	8a e1       	ldi	r24, 0x1A	; 26
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <i2c_start_cond+0x4>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <i2c_start_cond+0xa>
 10c:	a4 9a       	sbi	0x14, 4	; 20
 10e:	8a e1       	ldi	r24, 0x1A	; 26
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <i2c_start_cond+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <i2c_start_cond+0x14>
 116:	08 95       	ret

00000118 <i2c_restart_cond>:
 118:	a5 98       	cbi	0x14, 5	; 20
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <i2c_restart_cond+0x4>
 120:	00 c0       	rjmp	.+0      	; 0x122 <i2c_restart_cond+0xa>
 122:	a4 98       	cbi	0x14, 4	; 20
 124:	8a e1       	ldi	r24, 0x1A	; 26
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <i2c_restart_cond+0xe>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <i2c_restart_cond+0x14>
 12c:	a5 9a       	sbi	0x14, 5	; 20
 12e:	8a e1       	ldi	r24, 0x1A	; 26
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <i2c_restart_cond+0x18>
 134:	00 c0       	rjmp	.+0      	; 0x136 <i2c_restart_cond+0x1e>
 136:	a4 9a       	sbi	0x14, 4	; 20
 138:	8a e1       	ldi	r24, 0x1A	; 26
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <i2c_restart_cond+0x22>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <i2c_restart_cond+0x28>
 140:	08 95       	ret

00000142 <i2c_send_byte>:
 142:	98 e0       	ldi	r25, 0x08	; 8
 144:	88 23       	and	r24, r24
 146:	14 f0       	brlt	.+4      	; 0x14c <i2c_send_byte+0xa>
 148:	a5 9a       	sbi	0x14, 5	; 20
 14a:	01 c0       	rjmp	.+2      	; 0x14e <i2c_send_byte+0xc>
 14c:	a5 98       	cbi	0x14, 5	; 20
 14e:	2a e1       	ldi	r18, 0x1A	; 26
 150:	2a 95       	dec	r18
 152:	f1 f7       	brne	.-4      	; 0x150 <i2c_send_byte+0xe>
 154:	00 c0       	rjmp	.+0      	; 0x156 <i2c_send_byte+0x14>
 156:	a4 98       	cbi	0x14, 4	; 20
 158:	2a e1       	ldi	r18, 0x1A	; 26
 15a:	2a 95       	dec	r18
 15c:	f1 f7       	brne	.-4      	; 0x15a <i2c_send_byte+0x18>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <i2c_send_byte+0x1e>
 160:	a4 9a       	sbi	0x14, 4	; 20
 162:	88 0f       	add	r24, r24
 164:	91 50       	subi	r25, 0x01	; 1
 166:	71 f7       	brne	.-36     	; 0x144 <i2c_send_byte+0x2>
 168:	a5 98       	cbi	0x14, 5	; 20
 16a:	8a e1       	ldi	r24, 0x1A	; 26
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <i2c_send_byte+0x2a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <i2c_send_byte+0x30>
 172:	a4 98       	cbi	0x14, 4	; 20
 174:	2a e1       	ldi	r18, 0x1A	; 26
 176:	2a 95       	dec	r18
 178:	f1 f7       	brne	.-4      	; 0x176 <i2c_send_byte+0x34>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <i2c_send_byte+0x3a>
 17c:	83 b3       	in	r24, 0x13	; 19
 17e:	a4 9a       	sbi	0x14, 4	; 20
 180:	85 fb       	bst	r24, 5
 182:	88 27       	eor	r24, r24
 184:	80 f9       	bld	r24, 0
 186:	08 95       	ret

00000188 <i2c_get_byte>:
 188:	28 2f       	mov	r18, r24
 18a:	a5 98       	cbi	0x14, 5	; 20
 18c:	98 e0       	ldi	r25, 0x08	; 8
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	88 0f       	add	r24, r24
 192:	a4 98       	cbi	0x14, 4	; 20
 194:	3a e1       	ldi	r19, 0x1A	; 26
 196:	3a 95       	dec	r19
 198:	f1 f7       	brne	.-4      	; 0x196 <i2c_get_byte+0xe>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <i2c_get_byte+0x14>
 19c:	9d 99       	sbic	0x13, 5	; 19
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	a4 9a       	sbi	0x14, 4	; 20
 1a2:	3a e1       	ldi	r19, 0x1A	; 26
 1a4:	3a 95       	dec	r19
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <i2c_get_byte+0x1c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <i2c_get_byte+0x22>
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	89 f7       	brne	.-30     	; 0x190 <i2c_get_byte+0x8>
 1ae:	21 11       	cpse	r18, r1
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <i2c_get_byte+0x2e>
 1b2:	a5 9a       	sbi	0x14, 5	; 20
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <i2c_get_byte+0x30>
 1b6:	a5 98       	cbi	0x14, 5	; 20
 1b8:	9a e1       	ldi	r25, 0x1A	; 26
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <i2c_get_byte+0x32>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <i2c_get_byte+0x38>
 1c0:	a4 98       	cbi	0x14, 4	; 20
 1c2:	3a e1       	ldi	r19, 0x1A	; 26
 1c4:	3a 95       	dec	r19
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <i2c_get_byte+0x3c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <i2c_get_byte+0x42>
 1ca:	a4 9a       	sbi	0x14, 4	; 20
 1cc:	9a e1       	ldi	r25, 0x1A	; 26
 1ce:	9a 95       	dec	r25
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <i2c_get_byte+0x46>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <i2c_get_byte+0x4c>
 1d4:	a5 98       	cbi	0x14, 5	; 20
 1d6:	08 95       	ret

000001d8 <lis_write>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	d8 2f       	mov	r29, r24
 1de:	c6 2f       	mov	r28, r22
 1e0:	90 df       	rcall	.-224    	; 0x102 <i2c_start_cond>
 1e2:	8a e3       	ldi	r24, 0x3A	; 58
 1e4:	ae df       	rcall	.-164    	; 0x142 <i2c_send_byte>
 1e6:	8d 2f       	mov	r24, r29
 1e8:	ac df       	rcall	.-168    	; 0x142 <i2c_send_byte>
 1ea:	8c 2f       	mov	r24, r28
 1ec:	aa df       	rcall	.-172    	; 0x142 <i2c_send_byte>
 1ee:	4d df       	rcall	.-358    	; 0x8a <i2c_stop_cond>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <lis_read>:
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
 1fa:	83 df       	rcall	.-250    	; 0x102 <i2c_start_cond>
 1fc:	8a e3       	ldi	r24, 0x3A	; 58
 1fe:	a1 df       	rcall	.-190    	; 0x142 <i2c_send_byte>
 200:	8c 2f       	mov	r24, r28
 202:	9f df       	rcall	.-194    	; 0x142 <i2c_send_byte>
 204:	89 df       	rcall	.-238    	; 0x118 <i2c_restart_cond>
 206:	8b e3       	ldi	r24, 0x3B	; 59
 208:	9c df       	rcall	.-200    	; 0x142 <i2c_send_byte>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	bd df       	rcall	.-134    	; 0x188 <i2c_get_byte>
 20e:	c8 2f       	mov	r28, r24
 210:	83 df       	rcall	.-250    	; 0x118 <i2c_restart_cond>
 212:	3b df       	rcall	.-394    	; 0x8a <i2c_stop_cond>
 214:	8c 2f       	mov	r24, r28
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <init_lis302>:
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
 21e:	6c e5       	ldi	r22, 0x5C	; 92
 220:	81 e2       	ldi	r24, 0x21	; 33
 222:	da df       	rcall	.-76     	; 0x1d8 <lis_write>
 224:	81 e3       	ldi	r24, 0x31	; 49
 226:	e7 df       	rcall	.-50     	; 0x1f6 <lis_read>
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	e5 df       	rcall	.-54     	; 0x1f6 <lis_read>
 22c:	67 e6       	ldi	r22, 0x67	; 103
 22e:	80 e2       	ldi	r24, 0x20	; 32
 230:	d3 df       	rcall	.-90     	; 0x1d8 <lis_write>
 232:	80 e1       	ldi	r24, 0x10	; 16
 234:	c8 9f       	mul	r28, r24
 236:	b0 01       	movw	r22, r0
 238:	11 24       	eor	r1, r1
 23a:	6e 60       	ori	r22, 0x0E	; 14
 23c:	81 e2       	ldi	r24, 0x21	; 33
 23e:	cc df       	rcall	.-104    	; 0x1d8 <lis_write>
 240:	69 e0       	ldi	r22, 0x09	; 9
 242:	82 e2       	ldi	r24, 0x22	; 34
 244:	c9 df       	rcall	.-110    	; 0x1d8 <lis_write>
 246:	6a e6       	ldi	r22, 0x6A	; 106
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	c6 df       	rcall	.-116    	; 0x1d8 <lis_write>
 24c:	6a e6       	ldi	r22, 0x6A	; 106
 24e:	84 e3       	ldi	r24, 0x34	; 52
 250:	c3 df       	rcall	.-122    	; 0x1d8 <lis_write>
 252:	6f e7       	ldi	r22, 0x7F	; 127
 254:	82 e3       	ldi	r24, 0x32	; 50
 256:	c0 df       	rcall	.-128    	; 0x1d8 <lis_write>
 258:	6f e7       	ldi	r22, 0x7F	; 127
 25a:	86 e3       	ldi	r24, 0x36	; 54
 25c:	bd df       	rcall	.-134    	; 0x1d8 <lis_write>
 25e:	6f ef       	ldi	r22, 0xFF	; 255
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	ba df       	rcall	.-140    	; 0x1d8 <lis_write>
 264:	6f ef       	ldi	r22, 0xFF	; 255
 266:	87 e3       	ldi	r24, 0x37	; 55
 268:	b7 df       	rcall	.-146    	; 0x1d8 <lis_write>
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	c4 df       	rcall	.-120    	; 0x1f6 <lis_read>
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <read_xyz>:
 272:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <x_pos>
 276:	bf df       	rcall	.-130    	; 0x1f6 <lis_read>
 278:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <x>
 27c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <y_pos>
 280:	ba df       	rcall	.-140    	; 0x1f6 <lis_read>
 282:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <y>
 286:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 28a:	b5 df       	rcall	.-150    	; 0x1f6 <lis_read>
 28c:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <x>
 290:	02 2e       	mov	r0, r18
 292:	00 0c       	add	r0, r0
 294:	33 0b       	sbc	r19, r19
 296:	33 23       	and	r19, r19
 298:	1c f4       	brge	.+6      	; 0x2a0 <read_xyz+0x2e>
 29a:	31 95       	neg	r19
 29c:	21 95       	neg	r18
 29e:	31 09       	sbc	r19, r1
 2a0:	42 2f       	mov	r20, r18
 2a2:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <x>
 2a6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <y>
 2aa:	02 2e       	mov	r0, r18
 2ac:	00 0c       	add	r0, r0
 2ae:	33 0b       	sbc	r19, r19
 2b0:	33 23       	and	r19, r19
 2b2:	1c f4       	brge	.+6      	; 0x2ba <read_xyz+0x48>
 2b4:	31 95       	neg	r19
 2b6:	21 95       	neg	r18
 2b8:	31 09       	sbc	r19, r1
 2ba:	32 2f       	mov	r19, r18
 2bc:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <y>
 2c0:	08 2e       	mov	r0, r24
 2c2:	00 0c       	add	r0, r0
 2c4:	99 0b       	sbc	r25, r25
 2c6:	99 23       	and	r25, r25
 2c8:	1c f4       	brge	.+6      	; 0x2d0 <read_xyz+0x5e>
 2ca:	91 95       	neg	r25
 2cc:	81 95       	neg	r24
 2ce:	91 09       	sbc	r25, r1
 2d0:	98 2f       	mov	r25, r24
 2d2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <z>
 2d6:	41 11       	cpse	r20, r1
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <read_xyz+0x6e>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <x>
 2e0:	31 11       	cpse	r19, r1
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <read_xyz+0x78>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <y>
 2ea:	91 11       	cpse	r25, r1
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <read_xyz+0x82>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <z>
 2f4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <x>
 2f8:	86 30       	cpi	r24, 0x06	; 6
 2fa:	44 f4       	brge	.+16     	; 0x30c <read_xyz+0x9a>
 2fc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <y>
 300:	86 30       	cpi	r24, 0x06	; 6
 302:	24 f4       	brge	.+8      	; 0x30c <read_xyz+0x9a>
 304:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <z>
 308:	86 30       	cpi	r24, 0x06	; 6
 30a:	14 f0       	brlt	.+4      	; 0x310 <read_xyz+0x9e>
 30c:	c1 9a       	sbi	0x18, 1	; 24
 30e:	08 95       	ret
 310:	c1 98       	cbi	0x18, 1	; 24
 312:	08 95       	ret

00000314 <print_byte>:
}

void print_byte(const unsigned char c)						//Отправка байта. С ожиданием
{
	while(!(UCSRA&(1<<UDRE))){}								//Устанавливается, когда регистр свободен
 314:	5d 9b       	sbis	0x0b, 5	; 11
 316:	fe cf       	rjmp	.-4      	; 0x314 <print_byte>
	UDR = c;												//спихиваем в буфер передаваемый байт
 318:	8c b9       	out	0x0c, r24	; 12
 31a:	08 95       	ret

0000031c <print_w>:
}

void print_w(const char *s)									//Отправка строки. С ожиданием
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
	while (*s!=0) print_byte(*s++);
 322:	88 81       	ld	r24, Y
 324:	88 23       	and	r24, r24
 326:	29 f0       	breq	.+10     	; 0x332 <print_w+0x16>
 328:	21 96       	adiw	r28, 0x01	; 1
 32a:	f4 df       	rcall	.-24     	; 0x314 <print_byte>
 32c:	89 91       	ld	r24, Y+
 32e:	81 11       	cpse	r24, r1
 330:	fc cf       	rjmp	.-8      	; 0x32a <print_w+0xe>
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <position_space>:
	if(!z) z=1;														//если значение равно нулю, то присвоить ему единицу
	if(x>5||y>5||z>5) SET_LED else RES_LED							//проверка работы акселерлметра
}

void position_space()												//функция определения положения устройства в пространстве
{
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	signed int x_sum=0, y_sum=0, z_sum=0;							//переменные для суммирования показаний осей акселерометра
	print_w("Accel position space");
 348:	84 e6       	ldi	r24, 0x64	; 100
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	e7 df       	rcall	.-50     	; 0x31c <print_w>
 34e:	ce e1       	ldi	r28, 0x1E	; 30
	if(x>5||y>5||z>5) SET_LED else RES_LED							//проверка работы акселерлметра
}

void position_space()												//функция определения положения устройства в пространстве
{
	signed int x_sum=0, y_sum=0, z_sum=0;							//переменные для суммирования показаний осей акселерометра
 350:	c1 2c       	mov	r12, r1
 352:	d1 2c       	mov	r13, r1
 354:	e1 2c       	mov	r14, r1
 356:	f1 2c       	mov	r15, r1
 358:	00 e0       	ldi	r16, 0x00	; 0
 35a:	10 e0       	ldi	r17, 0x00	; 0
	for(unsigned char i=0;i<POS_NUM;i++){
		read_xyz();
		x_sum+=(x);													//суммрование значений осей для вычисления среднего
		y_sum+=(y);													//суммрование значений осей для вычисления среднего
		z_sum+=(z);													//суммрование значений осей для вычисления среднего		
		TOGGLE_LED
 35c:	d2 e0       	ldi	r29, 0x02	; 2
void position_space()												//функция определения положения устройства в пространстве
{
	signed int x_sum=0, y_sum=0, z_sum=0;							//переменные для суммирования показаний осей акселерометра
	print_w("Accel position space");
	for(unsigned char i=0;i<POS_NUM;i++){
		read_xyz();
 35e:	89 df       	rcall	.-238    	; 0x272 <read_xyz>
		x_sum+=(x);													//суммрование значений осей для вычисления среднего
 360:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <x>
 364:	08 0f       	add	r16, r24
 366:	11 1d       	adc	r17, r1
 368:	87 fd       	sbrc	r24, 7
 36a:	1a 95       	dec	r17
		y_sum+=(y);													//суммрование значений осей для вычисления среднего
 36c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <y>
 370:	e8 0e       	add	r14, r24
 372:	f1 1c       	adc	r15, r1
 374:	87 fd       	sbrc	r24, 7
 376:	fa 94       	dec	r15
		z_sum+=(z);													//суммрование значений осей для вычисления среднего		
 378:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <z>
 37c:	c8 0e       	add	r12, r24
 37e:	d1 1c       	adc	r13, r1
 380:	87 fd       	sbrc	r24, 7
 382:	da 94       	dec	r13
		TOGGLE_LED
 384:	88 b3       	in	r24, 0x18	; 24
 386:	8d 27       	eor	r24, r29
 388:	88 bb       	out	0x18, r24	; 24
		print_w(".");
 38a:	89 e7       	ldi	r24, 0x79	; 121
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	c6 df       	rcall	.-116    	; 0x31c <print_w>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9c e9       	ldi	r25, 0x9C	; 156
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <position_space+0x5c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <position_space+0x62>
 39a:	00 00       	nop
 39c:	c1 50       	subi	r28, 0x01	; 1

void position_space()												//функция определения положения устройства в пространстве
{
	signed int x_sum=0, y_sum=0, z_sum=0;							//переменные для суммирования показаний осей акселерометра
	print_w("Accel position space");
	for(unsigned char i=0;i<POS_NUM;i++){
 39e:	f9 f6       	brne	.-66     	; 0x35e <position_space+0x26>
		TOGGLE_LED
		print_w(".");
		_delay_ms(20);
	}
	x_sum/=POS_NUM; y_sum/=POS_NUM; z_sum/=POS_NUM;
	if(x_sum>=10){													//условие корректировки осей, по результатам измерений
 3a0:	0c 32       	cpi	r16, 0x2C	; 44
 3a2:	11 40       	sbci	r17, 0x01	; 1
 3a4:	6c f0       	brlt	.+26     	; 0x3c0 <position_space+0x88>
		x_pos=Zout; y_pos=Yout; z_pos=Xout;
 3a6:	8d e2       	ldi	r24, 0x2D	; 45
 3a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x_pos>
 3ac:	8b e2       	ldi	r24, 0x2B	; 43
 3ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y_pos>
 3b2:	89 e2       	ldi	r24, 0x29	; 41
 3b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		print_w("X -> ");
 3b8:	8b e7       	ldi	r24, 0x7B	; 123
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	af df       	rcall	.-162    	; 0x31c <print_w>
 3be:	23 c0       	rjmp	.+70     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	}else if(y_sum>=10){
 3c0:	8c e2       	ldi	r24, 0x2C	; 44
 3c2:	e8 16       	cp	r14, r24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	f8 06       	cpc	r15, r24
 3c8:	6c f0       	brlt	.+26     	; 0x3e4 <position_space+0xac>
		x_pos=Zout; y_pos=Xout; z_pos=Yout;
 3ca:	8d e2       	ldi	r24, 0x2D	; 45
 3cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x_pos>
 3d0:	89 e2       	ldi	r24, 0x29	; 41
 3d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y_pos>
 3d6:	8b e2       	ldi	r24, 0x2B	; 43
 3d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		print_w("Y -> ");
 3dc:	81 e8       	ldi	r24, 0x81	; 129
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	9d df       	rcall	.-198    	; 0x31c <print_w>
 3e2:	11 c0       	rjmp	.+34     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	}else if(z_sum>=10){
 3e4:	9c e2       	ldi	r25, 0x2C	; 44
 3e6:	c9 16       	cp	r12, r25
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	d9 06       	cpc	r13, r25
 3ec:	64 f0       	brlt	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		x_pos=Xout; y_pos=Yout; z_pos=Zout;
 3ee:	89 e2       	ldi	r24, 0x29	; 41
 3f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x_pos>
 3f4:	8b e2       	ldi	r24, 0x2B	; 43
 3f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <y_pos>
 3fa:	8d e2       	ldi	r24, 0x2D	; 45
 3fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		print_w("Z -> ");
 400:	87 e8       	ldi	r24, 0x87	; 135
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	8b df       	rcall	.-234    	; 0x31c <print_w>
	}
	print_w("OK\r\n");
 406:	83 e9       	ldi	r24, 0x93	; 147
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	88 df       	rcall	.-240    	; 0x31c <print_w>
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	08 95       	ret

0000041e <__vector_11>:

ISR(USART_RXC_vect)											//обработка прерывыния по приёму байта
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	char bf=UDR;											//считывание присланного байта
 436:	9c b1       	in	r25, 0x0c	; 12
	UDR=bf;													//отправка в порт присланного байта
 438:	9c b9       	out	0x0c, r25	; 12
	if(buf_rx_index<buffer_MAX){
 43a:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <buf_rx_index>
 43e:	84 36       	cpi	r24, 0x64	; 100
 440:	38 f5       	brcc	.+78     	; 0x490 <__stack+0x31>
		if(bf!=13&&bf!=10){
 442:	9d 30       	cpi	r25, 0x0D	; 13
 444:	59 f0       	breq	.+22     	; 0x45c <__vector_11+0x3e>
 446:	9a 30       	cpi	r25, 0x0A	; 10
 448:	49 f0       	breq	.+18     	; 0x45c <__vector_11+0x3e>
			buffer_rx[buf_rx_index]=bf;						//добавляем в буффер присланный байт
 44a:	e8 2f       	mov	r30, r24
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ed 53       	subi	r30, 0x3D	; 61
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	90 83       	st	Z, r25
			buf_rx_index++;									//увеличиваем счётчик присланных байтов
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <buf_rx_index>
 45a:	1a c0       	rjmp	.+52     	; 0x490 <__stack+0x31>
			}else{											//завершение приёма, если пришёл символ 13 (возвращение карретки)
			if(buffer_rx[0]==0xAA){							//если стартовый бит равен 10101010 (DEC: 170)
 45c:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <buffer_rx>
 460:	9a 3a       	cpi	r25, 0xAA	; 170
 462:	61 f4       	brne	.+24     	; 0x47c <__stack+0x1d>
				unsigned int summ_crc=buffer_rx[0]&0x0F;	//инициализация переменной для контрольной
				for(char i=1;i<buf_rx_index-1;i++)
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	91 05       	cpc	r25, r1
 46c:	3c f0       	brlt	.+14     	; 0x47c <__stack+0x1d>
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	42 2f       	mov	r20, r18
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	48 17       	cp	r20, r24
 478:	59 07       	cpc	r21, r25
 47a:	d4 f3       	brlt	.-12     	; 0x470 <__stack+0x11>
 47c:	e3 ec       	ldi	r30, 0xC3	; 195
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	87 e2       	ldi	r24, 0x27	; 39
 482:	91 e0       	ldi	r25, 0x01	; 1
				}	
			}
			
			//if(!strcmp(buffer_rx,"123")) PORTB=0b10101010; else PORTB=0; //сравнение присланного значения
			
			for(int i=0;i<buffer_MAX;i++)  buffer_rx[i]=0; //сброс буффера
 484:	11 92       	st	Z+, r1
 486:	8e 17       	cp	r24, r30
 488:	9f 07       	cpc	r25, r31
 48a:	e1 f7       	brne	.-8      	; 0x484 <__stack+0x25>
			buf_rx_index=0;
 48c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <buf_rx_index>
		}
	}
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	2f 91       	pop	r18
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <suart_init>:
#define DELAY_9600						110				//Константа задержки для скорости 9600
char del=DELAY_9600;									//Переменная задержки для скорости 9600
#define DELAY for(int i=0;i<del;i++) asm("nop");		//Дурацкая конструкция задержки для передачи данных

void suart_init(){										//Инициализация SUART
	SUART_DDR_TX |= (1 << SUART_PIN_TX);				//Настройка портов
 4a8:	89 9a       	sbi	0x11, 1	; 17
 4aa:	08 95       	ret

000004ac <suart_tx>:
}

void suart_tx(const unsigned char data){				//Передача байта
	SUART_PORT_TX &= ~(1 << SUART_PIN_TX);				//Старт бит
 4ac:	91 98       	cbi	0x12, 1	; 18
	DELAY
 4ae:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <del>
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	14 16       	cp	r1, r20
 4b6:	15 06       	cpc	r1, r21
 4b8:	5c f4       	brge	.+22     	; 0x4d0 <suart_tx+0x24>
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	00 00       	nop
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	24 17       	cp	r18, r20
 4c6:	35 07       	cpc	r19, r21
 4c8:	d1 f7       	brne	.-12     	; 0x4be <suart_tx+0x12>
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <suart_tx+0x28>
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	50 e0       	ldi	r21, 0x00	; 0
	for(unsigned char i = 0; i < 8; i++){				//Передача байта
		if(((data >> i) & 0x01) != 0)/* Если текущий бит 1*/SUART_PORT_TX |= (1 << SUART_PIN_TX);else/*Если текущий бит 0*/SUART_PORT_TX &= ~(1 << SUART_PIN_TX);
 4d4:	68 2f       	mov	r22, r24
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	cb 01       	movw	r24, r22
 4da:	04 2e       	mov	r0, r20
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <suart_tx+0x36>
 4de:	95 95       	asr	r25
 4e0:	87 95       	ror	r24
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <suart_tx+0x32>
 4e6:	80 ff       	sbrs	r24, 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <suart_tx+0x42>
 4ea:	91 9a       	sbi	0x12, 1	; 18
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <suart_tx+0x44>
 4ee:	91 98       	cbi	0x12, 1	; 18
		DELAY
 4f0:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <del>
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	12 16       	cp	r1, r18
 4f8:	13 06       	cpc	r1, r19
 4fa:	3c f4       	brge	.+14     	; 0x50a <suart_tx+0x5e>
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	00 00       	nop
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	82 17       	cp	r24, r18
 506:	93 07       	cpc	r25, r19
 508:	d9 f7       	brne	.-10     	; 0x500 <suart_tx+0x54>
 50a:	4f 5f       	subi	r20, 0xFF	; 255
 50c:	5f 4f       	sbci	r21, 0xFF	; 255
}

void suart_tx(const unsigned char data){				//Передача байта
	SUART_PORT_TX &= ~(1 << SUART_PIN_TX);				//Старт бит
	DELAY
	for(unsigned char i = 0; i < 8; i++){				//Передача байта
 50e:	48 30       	cpi	r20, 0x08	; 8
 510:	51 05       	cpc	r21, r1
 512:	11 f7       	brne	.-60     	; 0x4d8 <suart_tx+0x2c>
		if(((data >> i) & 0x01) != 0)/* Если текущий бит 1*/SUART_PORT_TX |= (1 << SUART_PIN_TX);else/*Если текущий бит 0*/SUART_PORT_TX &= ~(1 << SUART_PIN_TX);
		DELAY
	}
	SUART_PORT_TX |= (1 << SUART_PIN_TX);				//Стоп бит
 514:	91 9a       	sbi	0x12, 1	; 18
	DELAY
 516:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <del>
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	12 16       	cp	r1, r18
 51e:	13 06       	cpc	r1, r19
 520:	3c f4       	brge	.+14     	; 0x530 <suart_tx+0x84>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	00 00       	nop
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	82 17       	cp	r24, r18
 52c:	93 07       	cpc	r25, r19
 52e:	d9 f7       	brne	.-10     	; 0x526 <suart_tx+0x7a>
 530:	08 95       	ret

00000532 <suart_tx_str>:
}

void suart_tx_str(const char *str){						//Передача строки
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	ec 01       	movw	r28, r24
	while(*str!=0)suart_tx(*str++);
 538:	88 81       	ld	r24, Y
 53a:	88 23       	and	r24, r24
 53c:	29 f0       	breq	.+10     	; 0x548 <suart_tx_str+0x16>
 53e:	21 96       	adiw	r28, 0x01	; 1
 540:	b5 df       	rcall	.-150    	; 0x4ac <suart_tx>
 542:	89 91       	ld	r24, Y+
 544:	81 11       	cpse	r24, r1
 546:	fc cf       	rjmp	.-8      	; 0x540 <suart_tx_str+0xe>
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <__vector_9>:
char tim0_int=0;												//переменная для подсчёта циклов таймера 0
extern unsigned int freq;										//переменная для подсчёта частоты	
extern unsigned int freq_cur;									//переменная хранения текущей частоты	

ISR(TIMER0_OVF_vect)											//прерывание таймера 0 по переполнению
{
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
	tim0_int++;													//подсчёт циклов таймера
 55c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tim0_int>
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <tim0_int>
	TCNT0=T0_SEC;												//начальное значение счёта
 566:	84 e8       	ldi	r24, 0x84	; 132
 568:	82 bf       	out	0x32, r24	; 50
	if(tim0_int>=T0_NUM_INT) {									//если ждали секунду, то 
 56a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tim0_int>
 56e:	8e 31       	cpi	r24, 0x1E	; 30
 570:	80 f0       	brcs	.+32     	; 0x592 <__vector_9+0x44>
		freq_cur=freq*2;
 572:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <freq>
 576:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <freq+0x1>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <freq_cur+0x1>
 582:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <freq_cur>
		freq=0;
 586:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <freq+0x1>
 58a:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <freq>
		tim0_int=0;
 58e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <tim0_int>
	}
}
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <__vector_5>:

ISR(TIMER1_CAPT_vect){											//прерывание таймера 1 по захвату импульса
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
	freq++;
 5ae:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <freq>
 5b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <freq+0x1>
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <freq+0x1>
 5bc:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <freq>
}
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <timers_init>:

void timers_init(){
	TCCR0|=PRESC_1024;											//настройка предделителя частоты таймера 0
 5ce:	83 b7       	in	r24, 0x33	; 51
 5d0:	85 60       	ori	r24, 0x05	; 5
 5d2:	83 bf       	out	0x33, r24	; 51
	TCCR1B|=RISSING;											//настройка предделителя частоты таймера 1
 5d4:	8e b5       	in	r24, 0x2e	; 46
 5d6:	87 60       	ori	r24, 0x07	; 7
 5d8:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE0)|(1<<TICIE1);								//разрешение прерывания таймера 0 по переполнению и таймера 1 по захвату
 5da:	89 b7       	in	r24, 0x39	; 57
 5dc:	81 62       	ori	r24, 0x21	; 33
 5de:	89 bf       	out	0x39, r24	; 57
	TCNT0=T0_SEC;												//начальное значение счёта
 5e0:	84 e8       	ldi	r24, 0x84	; 132
 5e2:	82 bf       	out	0x32, r24	; 50
	sei();														//разрешить глобальные прерывания
 5e4:	78 94       	sei
 5e6:	08 95       	ret

000005e8 <main>:

uint8_t porog_xy=0;														//переменная для хранения порога по XY
uint16_t porog_z=0;														//переменная для хранения порога по Z

int main(void)
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	c0 57       	subi	r28, 0x70	; 112
 5f2:	d1 09       	sbc	r29, r1
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	cd bf       	out	0x3d, r28	; 61
	char x_buf[AVER_NUM]={0};											//массив хранения AVER_NUM измерений для вычисления среднего значения
 5fe:	19 82       	std	Y+1, r1	; 0x01
 600:	1a 82       	std	Y+2, r1	; 0x02
 602:	1b 82       	std	Y+3, r1	; 0x03
 604:	1c 82       	std	Y+4, r1	; 0x04
	char y_buf[AVER_NUM]={0};											//массив хранения AVER_NUM измерений для вычисления среднего значения
 606:	1d 82       	std	Y+5, r1	; 0x05
 608:	1e 82       	std	Y+6, r1	; 0x06
 60a:	1f 82       	std	Y+7, r1	; 0x07
 60c:	18 86       	std	Y+8, r1	; 0x08
	char z_buf[AVER_NUM]={0};											//массив хранения AVER_NUM измерений для вычисления среднего значения
 60e:	19 86       	std	Y+9, r1	; 0x09
 610:	1a 86       	std	Y+10, r1	; 0x0a
 612:	1b 86       	std	Y+11, r1	; 0x0b
 614:	1c 86       	std	Y+12, r1	; 0x0c
	char x_aver=0,y_aver=0,z_aver=0;									//переменные для хранения среднего значения измерений по осям
	porog_xy=POROG_XY_R;												//чтение порога XY из eeprom
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	1c d3       	rcall	.+1592   	; 0xc54 <eeprom_read_byte>
 61c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <porog_xy>
	porog_z=POROG_Z_R;													//чтение порога Z из eeprom
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	1f d3       	rcall	.+1598   	; 0xc64 <eeprom_read_word>
 626:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__data_end+0x1>
 62a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
	DDRB|=(1<<1)|(0<<0);												//настройка PORTB1 на выход, настройка PORTB0 на вход
 62e:	b9 9a       	sbi	0x17, 1	; 23
	PORTB|=(1<<0);														//подтяжка входа к питанию
 630:	c0 9a       	sbi	0x18, 0	; 24
	i2c_init();															//инициализация софтового i2c
 632:	60 dd       	rcall	.-1344   	; 0xf4 <i2c_init>
	//init_UART();														//инициализация UARTa
	suart_init();														//инициализация софтового юарта
 634:	39 df       	rcall	.-398    	; 0x4a8 <suart_init>
	timers_init();														//инициализация таймеров
 636:	cb df       	rcall	.-106    	; 0x5ce <timers_init>
 638:	fe 01       	movw	r30, r28
 63a:	3d 96       	adiw	r30, 0x0d	; 13
 63c:	ce 01       	movw	r24, r28
 63e:	8f 58       	subi	r24, 0x8F	; 143
 640:	9f 4f       	sbci	r25, 0xFF	; 255
	char buf[100]; for(int i=0;i<100;i++) buf[i]=0;						//буффер строки для вывода сообщений в терминал и его обнуление
 642:	11 92       	st	Z+, r1
 644:	e8 17       	cp	r30, r24
 646:	f9 07       	cpc	r31, r25
 648:	e1 f7       	brne	.-8      	; 0x642 <main+0x5a>
	if(init_lis302(0)==OK_ACCEL){										//если акселеромтр ответил, то продолжаем работу, если нет, то зацикливаемся
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	e6 dd       	rcall	.-1076   	; 0x21a <init_lis302>
 64e:	8b 33       	cpi	r24, 0x3B	; 59
 650:	81 f4       	brne	.+32     	; 0x672 <main+0x8a>
		print_w("ACCEL OK\r\n");
 652:	8d e8       	ldi	r24, 0x8D	; 141
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	62 de       	rcall	.-828    	; 0x31c <print_w>
		}else{
		do{print_w("ACCEL ERROR\r\n"); _delay_ms(200);}while (1);		//зацикливаемся и выдаём сообщение об ошибке
	}	
	position_space();													//определение устройства в пространстве
 658:	6f de       	rcall	.-802    	; 0x338 <position_space>
	init_lis302(1);														//инициализация акселерометра без гравитации
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	de dd       	rcall	.-1092   	; 0x21a <init_lis302>
	{
		read_xyz();														//чтение значений акселерометра по осям
		x_aver=aver_arr(x_buf,x);										//вычисление среднего значения по X
		y_aver=aver_arr(y_buf,y);										//вычисление среднего значения по Y
		z_aver=aver_arr(z_buf,z);										//вычисление среднего значения по Z
		sprintf(buf,"%d\t%d\t%d\t%d\t%d\t%d\r\n",x,x_aver,y,y_aver,z,z_aver);	//компановка обычных значений и средних
 65e:	0f 2e       	mov	r0, r31
 660:	f6 ea       	ldi	r31, 0xA6	; 166
 662:	ef 2e       	mov	r14, r31
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	ff 2e       	mov	r15, r31
 668:	f0 2d       	mov	r31, r0
 66a:	8e 01       	movw	r16, r28
 66c:	03 5f       	subi	r16, 0xF3	; 243
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	0d c0       	rjmp	.+26     	; 0x68c <main+0xa4>
	timers_init();														//инициализация таймеров
	char buf[100]; for(int i=0;i<100;i++) buf[i]=0;						//буффер строки для вывода сообщений в терминал и его обнуление
	if(init_lis302(0)==OK_ACCEL){										//если акселеромтр ответил, то продолжаем работу, если нет, то зацикливаемся
		print_w("ACCEL OK\r\n");
		}else{
		do{print_w("ACCEL ERROR\r\n"); _delay_ms(200);}while (1);		//зацикливаемся и выдаём сообщение об ошибке
 672:	88 e9       	ldi	r24, 0x98	; 152
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	52 de       	rcall	.-860    	; 0x31c <print_w>
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	81 ee       	ldi	r24, 0xE1	; 225
 67c:	94 e0       	ldi	r25, 0x04	; 4
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x96>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0xa0>
 688:	00 00       	nop
 68a:	f3 cf       	rjmp	.-26     	; 0x672 <main+0x8a>
	}	
	position_space();													//определение устройства в пространстве
	init_lis302(1);														//инициализация акселерометра без гравитации
	while (1)
	{
		read_xyz();														//чтение значений акселерометра по осям
 68c:	f2 dd       	rcall	.-1052   	; 0x272 <read_xyz>
		x_aver=aver_arr(x_buf,x);										//вычисление среднего значения по X
 68e:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <x>
 692:	ce 01       	movw	r24, r28
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	e3 dc       	rcall	.-1594   	; 0x5e <aver_arr>
 698:	d8 2e       	mov	r13, r24
		y_aver=aver_arr(y_buf,y);										//вычисление среднего значения по Y
 69a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <y>
 69e:	ce 01       	movw	r24, r28
 6a0:	05 96       	adiw	r24, 0x05	; 5
 6a2:	dd dc       	rcall	.-1606   	; 0x5e <aver_arr>
 6a4:	c8 2e       	mov	r12, r24
		z_aver=aver_arr(z_buf,z);										//вычисление среднего значения по Z
 6a6:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <z>
 6aa:	ce 01       	movw	r24, r28
 6ac:	09 96       	adiw	r24, 0x09	; 9
 6ae:	d7 dc       	rcall	.-1618   	; 0x5e <aver_arr>
		sprintf(buf,"%d\t%d\t%d\t%d\t%d\t%d\r\n",x,x_aver,y,y_aver,z,z_aver);	//компановка обычных значений и средних
 6b0:	1f 92       	push	r1
 6b2:	8f 93       	push	r24
 6b4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <z>
 6b8:	28 2f       	mov	r18, r24
 6ba:	08 2e       	mov	r0, r24
 6bc:	00 0c       	add	r0, r0
 6be:	33 0b       	sbc	r19, r19
 6c0:	3f 93       	push	r19
 6c2:	8f 93       	push	r24
 6c4:	1f 92       	push	r1
 6c6:	cf 92       	push	r12
 6c8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <y>
 6cc:	28 2f       	mov	r18, r24
 6ce:	08 2e       	mov	r0, r24
 6d0:	00 0c       	add	r0, r0
 6d2:	33 0b       	sbc	r19, r19
 6d4:	3f 93       	push	r19
 6d6:	8f 93       	push	r24
 6d8:	1f 92       	push	r1
 6da:	df 92       	push	r13
 6dc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <x>
 6e0:	28 2f       	mov	r18, r24
 6e2:	08 2e       	mov	r0, r24
 6e4:	00 0c       	add	r0, r0
 6e6:	33 0b       	sbc	r19, r19
 6e8:	3f 93       	push	r19
 6ea:	8f 93       	push	r24
 6ec:	ff 92       	push	r15
 6ee:	ef 92       	push	r14
 6f0:	1f 93       	push	r17
 6f2:	0f 93       	push	r16
 6f4:	0e d0       	rcall	.+28     	; 0x712 <sprintf>
		//sprintf(buf,"%d\t%d\t%d\r\n",x,y,z);							//компановка только обчных значений
		//print_w(buf);
		suart_tx_str(buf);
 6f6:	c8 01       	movw	r24, r16
 6f8:	1c df       	rcall	.-456    	; 0x532 <suart_tx_str>
 6fa:	8f e3       	ldi	r24, 0x3F	; 63
 6fc:	9c e9       	ldi	r25, 0x9C	; 156
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <main+0x116>
 702:	00 c0       	rjmp	.+0      	; 0x704 <main+0x11c>
 704:	00 00       	nop
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	bd cf       	rjmp	.-134    	; 0x68c <main+0xa4>

00000712 <sprintf>:
 712:	ae e0       	ldi	r26, 0x0E	; 14
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	ee e8       	ldi	r30, 0x8E	; 142
 718:	f3 e0       	ldi	r31, 0x03	; 3
 71a:	c7 c2       	rjmp	.+1422   	; 0xcaa <__prologue_saves__+0x1c>
 71c:	0d 89       	ldd	r16, Y+21	; 0x15
 71e:	1e 89       	ldd	r17, Y+22	; 0x16
 720:	86 e0       	ldi	r24, 0x06	; 6
 722:	8c 83       	std	Y+4, r24	; 0x04
 724:	1a 83       	std	Y+2, r17	; 0x02
 726:	09 83       	std	Y+1, r16	; 0x01
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	9f e7       	ldi	r25, 0x7F	; 127
 72c:	9e 83       	std	Y+6, r25	; 0x06
 72e:	8d 83       	std	Y+5, r24	; 0x05
 730:	ae 01       	movw	r20, r28
 732:	47 5e       	subi	r20, 0xE7	; 231
 734:	5f 4f       	sbci	r21, 0xFF	; 255
 736:	6f 89       	ldd	r22, Y+23	; 0x17
 738:	78 8d       	ldd	r23, Y+24	; 0x18
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	08 d0       	rcall	.+16     	; 0x750 <vfprintf>
 740:	ef 81       	ldd	r30, Y+7	; 0x07
 742:	f8 85       	ldd	r31, Y+8	; 0x08
 744:	e0 0f       	add	r30, r16
 746:	f1 1f       	adc	r31, r17
 748:	10 82       	st	Z, r1
 74a:	2e 96       	adiw	r28, 0x0e	; 14
 74c:	e4 e0       	ldi	r30, 0x04	; 4
 74e:	c9 c2       	rjmp	.+1426   	; 0xce2 <__epilogue_restores__+0x1c>

00000750 <vfprintf>:
 750:	ab e0       	ldi	r26, 0x0B	; 11
 752:	b0 e0       	ldi	r27, 0x00	; 0
 754:	ed ea       	ldi	r30, 0xAD	; 173
 756:	f3 e0       	ldi	r31, 0x03	; 3
 758:	9a c2       	rjmp	.+1332   	; 0xc8e <__prologue_saves__>
 75a:	6c 01       	movw	r12, r24
 75c:	7b 01       	movw	r14, r22
 75e:	8a 01       	movw	r16, r20
 760:	fc 01       	movw	r30, r24
 762:	17 82       	std	Z+7, r1	; 0x07
 764:	16 82       	std	Z+6, r1	; 0x06
 766:	83 81       	ldd	r24, Z+3	; 0x03
 768:	81 ff       	sbrs	r24, 1
 76a:	bf c1       	rjmp	.+894    	; 0xaea <vfprintf+0x39a>
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	3c 01       	movw	r6, r24
 772:	f6 01       	movw	r30, r12
 774:	93 81       	ldd	r25, Z+3	; 0x03
 776:	f7 01       	movw	r30, r14
 778:	93 fd       	sbrc	r25, 3
 77a:	85 91       	lpm	r24, Z+
 77c:	93 ff       	sbrs	r25, 3
 77e:	81 91       	ld	r24, Z+
 780:	7f 01       	movw	r14, r30
 782:	88 23       	and	r24, r24
 784:	09 f4       	brne	.+2      	; 0x788 <vfprintf+0x38>
 786:	ad c1       	rjmp	.+858    	; 0xae2 <vfprintf+0x392>
 788:	85 32       	cpi	r24, 0x25	; 37
 78a:	39 f4       	brne	.+14     	; 0x79a <vfprintf+0x4a>
 78c:	93 fd       	sbrc	r25, 3
 78e:	85 91       	lpm	r24, Z+
 790:	93 ff       	sbrs	r25, 3
 792:	81 91       	ld	r24, Z+
 794:	7f 01       	movw	r14, r30
 796:	85 32       	cpi	r24, 0x25	; 37
 798:	21 f4       	brne	.+8      	; 0x7a2 <vfprintf+0x52>
 79a:	b6 01       	movw	r22, r12
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	c0 d1       	rcall	.+896    	; 0xb20 <fputc>
 7a0:	e8 cf       	rjmp	.-48     	; 0x772 <vfprintf+0x22>
 7a2:	91 2c       	mov	r9, r1
 7a4:	21 2c       	mov	r2, r1
 7a6:	31 2c       	mov	r3, r1
 7a8:	ff e1       	ldi	r31, 0x1F	; 31
 7aa:	f3 15       	cp	r31, r3
 7ac:	d8 f0       	brcs	.+54     	; 0x7e4 <vfprintf+0x94>
 7ae:	8b 32       	cpi	r24, 0x2B	; 43
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <vfprintf+0x80>
 7b2:	38 f4       	brcc	.+14     	; 0x7c2 <vfprintf+0x72>
 7b4:	80 32       	cpi	r24, 0x20	; 32
 7b6:	79 f0       	breq	.+30     	; 0x7d6 <vfprintf+0x86>
 7b8:	83 32       	cpi	r24, 0x23	; 35
 7ba:	a1 f4       	brne	.+40     	; 0x7e4 <vfprintf+0x94>
 7bc:	23 2d       	mov	r18, r3
 7be:	20 61       	ori	r18, 0x10	; 16
 7c0:	1d c0       	rjmp	.+58     	; 0x7fc <vfprintf+0xac>
 7c2:	8d 32       	cpi	r24, 0x2D	; 45
 7c4:	61 f0       	breq	.+24     	; 0x7de <vfprintf+0x8e>
 7c6:	80 33       	cpi	r24, 0x30	; 48
 7c8:	69 f4       	brne	.+26     	; 0x7e4 <vfprintf+0x94>
 7ca:	23 2d       	mov	r18, r3
 7cc:	21 60       	ori	r18, 0x01	; 1
 7ce:	16 c0       	rjmp	.+44     	; 0x7fc <vfprintf+0xac>
 7d0:	83 2d       	mov	r24, r3
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	38 2e       	mov	r3, r24
 7d6:	e3 2d       	mov	r30, r3
 7d8:	e4 60       	ori	r30, 0x04	; 4
 7da:	3e 2e       	mov	r3, r30
 7dc:	2a c0       	rjmp	.+84     	; 0x832 <vfprintf+0xe2>
 7de:	f3 2d       	mov	r31, r3
 7e0:	f8 60       	ori	r31, 0x08	; 8
 7e2:	1d c0       	rjmp	.+58     	; 0x81e <vfprintf+0xce>
 7e4:	37 fc       	sbrc	r3, 7
 7e6:	2d c0       	rjmp	.+90     	; 0x842 <vfprintf+0xf2>
 7e8:	20 ed       	ldi	r18, 0xD0	; 208
 7ea:	28 0f       	add	r18, r24
 7ec:	2a 30       	cpi	r18, 0x0A	; 10
 7ee:	40 f0       	brcs	.+16     	; 0x800 <vfprintf+0xb0>
 7f0:	8e 32       	cpi	r24, 0x2E	; 46
 7f2:	b9 f4       	brne	.+46     	; 0x822 <vfprintf+0xd2>
 7f4:	36 fc       	sbrc	r3, 6
 7f6:	75 c1       	rjmp	.+746    	; 0xae2 <vfprintf+0x392>
 7f8:	23 2d       	mov	r18, r3
 7fa:	20 64       	ori	r18, 0x40	; 64
 7fc:	32 2e       	mov	r3, r18
 7fe:	19 c0       	rjmp	.+50     	; 0x832 <vfprintf+0xe2>
 800:	36 fe       	sbrs	r3, 6
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0xc0>
 804:	8a e0       	ldi	r24, 0x0A	; 10
 806:	98 9e       	mul	r9, r24
 808:	20 0d       	add	r18, r0
 80a:	11 24       	eor	r1, r1
 80c:	92 2e       	mov	r9, r18
 80e:	11 c0       	rjmp	.+34     	; 0x832 <vfprintf+0xe2>
 810:	ea e0       	ldi	r30, 0x0A	; 10
 812:	2e 9e       	mul	r2, r30
 814:	20 0d       	add	r18, r0
 816:	11 24       	eor	r1, r1
 818:	22 2e       	mov	r2, r18
 81a:	f3 2d       	mov	r31, r3
 81c:	f0 62       	ori	r31, 0x20	; 32
 81e:	3f 2e       	mov	r3, r31
 820:	08 c0       	rjmp	.+16     	; 0x832 <vfprintf+0xe2>
 822:	8c 36       	cpi	r24, 0x6C	; 108
 824:	21 f4       	brne	.+8      	; 0x82e <vfprintf+0xde>
 826:	83 2d       	mov	r24, r3
 828:	80 68       	ori	r24, 0x80	; 128
 82a:	38 2e       	mov	r3, r24
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0xe2>
 82e:	88 36       	cpi	r24, 0x68	; 104
 830:	41 f4       	brne	.+16     	; 0x842 <vfprintf+0xf2>
 832:	f7 01       	movw	r30, r14
 834:	93 fd       	sbrc	r25, 3
 836:	85 91       	lpm	r24, Z+
 838:	93 ff       	sbrs	r25, 3
 83a:	81 91       	ld	r24, Z+
 83c:	7f 01       	movw	r14, r30
 83e:	81 11       	cpse	r24, r1
 840:	b3 cf       	rjmp	.-154    	; 0x7a8 <vfprintf+0x58>
 842:	98 2f       	mov	r25, r24
 844:	9f 7d       	andi	r25, 0xDF	; 223
 846:	95 54       	subi	r25, 0x45	; 69
 848:	93 30       	cpi	r25, 0x03	; 3
 84a:	28 f4       	brcc	.+10     	; 0x856 <vfprintf+0x106>
 84c:	0c 5f       	subi	r16, 0xFC	; 252
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	9f e3       	ldi	r25, 0x3F	; 63
 852:	99 83       	std	Y+1, r25	; 0x01
 854:	0d c0       	rjmp	.+26     	; 0x870 <vfprintf+0x120>
 856:	83 36       	cpi	r24, 0x63	; 99
 858:	31 f0       	breq	.+12     	; 0x866 <vfprintf+0x116>
 85a:	83 37       	cpi	r24, 0x73	; 115
 85c:	71 f0       	breq	.+28     	; 0x87a <vfprintf+0x12a>
 85e:	83 35       	cpi	r24, 0x53	; 83
 860:	09 f0       	breq	.+2      	; 0x864 <vfprintf+0x114>
 862:	55 c0       	rjmp	.+170    	; 0x90e <vfprintf+0x1be>
 864:	20 c0       	rjmp	.+64     	; 0x8a6 <vfprintf+0x156>
 866:	f8 01       	movw	r30, r16
 868:	80 81       	ld	r24, Z
 86a:	89 83       	std	Y+1, r24	; 0x01
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	88 24       	eor	r8, r8
 872:	83 94       	inc	r8
 874:	91 2c       	mov	r9, r1
 876:	53 01       	movw	r10, r6
 878:	12 c0       	rjmp	.+36     	; 0x89e <vfprintf+0x14e>
 87a:	28 01       	movw	r4, r16
 87c:	f2 e0       	ldi	r31, 0x02	; 2
 87e:	4f 0e       	add	r4, r31
 880:	51 1c       	adc	r5, r1
 882:	f8 01       	movw	r30, r16
 884:	a0 80       	ld	r10, Z
 886:	b1 80       	ldd	r11, Z+1	; 0x01
 888:	36 fe       	sbrs	r3, 6
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x142>
 88c:	69 2d       	mov	r22, r9
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x146>
 892:	6f ef       	ldi	r22, 0xFF	; 255
 894:	7f ef       	ldi	r23, 0xFF	; 255
 896:	c5 01       	movw	r24, r10
 898:	38 d1       	rcall	.+624    	; 0xb0a <strnlen>
 89a:	4c 01       	movw	r8, r24
 89c:	82 01       	movw	r16, r4
 89e:	f3 2d       	mov	r31, r3
 8a0:	ff 77       	andi	r31, 0x7F	; 127
 8a2:	3f 2e       	mov	r3, r31
 8a4:	15 c0       	rjmp	.+42     	; 0x8d0 <vfprintf+0x180>
 8a6:	28 01       	movw	r4, r16
 8a8:	22 e0       	ldi	r18, 0x02	; 2
 8aa:	42 0e       	add	r4, r18
 8ac:	51 1c       	adc	r5, r1
 8ae:	f8 01       	movw	r30, r16
 8b0:	a0 80       	ld	r10, Z
 8b2:	b1 80       	ldd	r11, Z+1	; 0x01
 8b4:	36 fe       	sbrs	r3, 6
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <vfprintf+0x16e>
 8b8:	69 2d       	mov	r22, r9
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <vfprintf+0x172>
 8be:	6f ef       	ldi	r22, 0xFF	; 255
 8c0:	7f ef       	ldi	r23, 0xFF	; 255
 8c2:	c5 01       	movw	r24, r10
 8c4:	17 d1       	rcall	.+558    	; 0xaf4 <strnlen_P>
 8c6:	4c 01       	movw	r8, r24
 8c8:	f3 2d       	mov	r31, r3
 8ca:	f0 68       	ori	r31, 0x80	; 128
 8cc:	3f 2e       	mov	r3, r31
 8ce:	82 01       	movw	r16, r4
 8d0:	33 fc       	sbrc	r3, 3
 8d2:	19 c0       	rjmp	.+50     	; 0x906 <vfprintf+0x1b6>
 8d4:	82 2d       	mov	r24, r2
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	88 16       	cp	r8, r24
 8da:	99 06       	cpc	r9, r25
 8dc:	a0 f4       	brcc	.+40     	; 0x906 <vfprintf+0x1b6>
 8de:	b6 01       	movw	r22, r12
 8e0:	80 e2       	ldi	r24, 0x20	; 32
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	1d d1       	rcall	.+570    	; 0xb20 <fputc>
 8e6:	2a 94       	dec	r2
 8e8:	f5 cf       	rjmp	.-22     	; 0x8d4 <vfprintf+0x184>
 8ea:	f5 01       	movw	r30, r10
 8ec:	37 fc       	sbrc	r3, 7
 8ee:	85 91       	lpm	r24, Z+
 8f0:	37 fe       	sbrs	r3, 7
 8f2:	81 91       	ld	r24, Z+
 8f4:	5f 01       	movw	r10, r30
 8f6:	b6 01       	movw	r22, r12
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	12 d1       	rcall	.+548    	; 0xb20 <fputc>
 8fc:	21 10       	cpse	r2, r1
 8fe:	2a 94       	dec	r2
 900:	21 e0       	ldi	r18, 0x01	; 1
 902:	82 1a       	sub	r8, r18
 904:	91 08       	sbc	r9, r1
 906:	81 14       	cp	r8, r1
 908:	91 04       	cpc	r9, r1
 90a:	79 f7       	brne	.-34     	; 0x8ea <vfprintf+0x19a>
 90c:	e1 c0       	rjmp	.+450    	; 0xad0 <vfprintf+0x380>
 90e:	84 36       	cpi	r24, 0x64	; 100
 910:	11 f0       	breq	.+4      	; 0x916 <vfprintf+0x1c6>
 912:	89 36       	cpi	r24, 0x69	; 105
 914:	39 f5       	brne	.+78     	; 0x964 <vfprintf+0x214>
 916:	f8 01       	movw	r30, r16
 918:	37 fe       	sbrs	r3, 7
 91a:	07 c0       	rjmp	.+14     	; 0x92a <vfprintf+0x1da>
 91c:	60 81       	ld	r22, Z
 91e:	71 81       	ldd	r23, Z+1	; 0x01
 920:	82 81       	ldd	r24, Z+2	; 0x02
 922:	93 81       	ldd	r25, Z+3	; 0x03
 924:	0c 5f       	subi	r16, 0xFC	; 252
 926:	1f 4f       	sbci	r17, 0xFF	; 255
 928:	08 c0       	rjmp	.+16     	; 0x93a <vfprintf+0x1ea>
 92a:	60 81       	ld	r22, Z
 92c:	71 81       	ldd	r23, Z+1	; 0x01
 92e:	07 2e       	mov	r0, r23
 930:	00 0c       	add	r0, r0
 932:	88 0b       	sbc	r24, r24
 934:	99 0b       	sbc	r25, r25
 936:	0e 5f       	subi	r16, 0xFE	; 254
 938:	1f 4f       	sbci	r17, 0xFF	; 255
 93a:	f3 2d       	mov	r31, r3
 93c:	ff 76       	andi	r31, 0x6F	; 111
 93e:	3f 2e       	mov	r3, r31
 940:	97 ff       	sbrs	r25, 7
 942:	09 c0       	rjmp	.+18     	; 0x956 <vfprintf+0x206>
 944:	90 95       	com	r25
 946:	80 95       	com	r24
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	f0 68       	ori	r31, 0x80	; 128
 954:	3f 2e       	mov	r3, r31
 956:	2a e0       	ldi	r18, 0x0A	; 10
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	a3 01       	movw	r20, r6
 95c:	1d d1       	rcall	.+570    	; 0xb98 <__ultoa_invert>
 95e:	88 2e       	mov	r8, r24
 960:	86 18       	sub	r8, r6
 962:	44 c0       	rjmp	.+136    	; 0x9ec <vfprintf+0x29c>
 964:	85 37       	cpi	r24, 0x75	; 117
 966:	31 f4       	brne	.+12     	; 0x974 <vfprintf+0x224>
 968:	23 2d       	mov	r18, r3
 96a:	2f 7e       	andi	r18, 0xEF	; 239
 96c:	b2 2e       	mov	r11, r18
 96e:	2a e0       	ldi	r18, 0x0A	; 10
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	25 c0       	rjmp	.+74     	; 0x9be <vfprintf+0x26e>
 974:	93 2d       	mov	r25, r3
 976:	99 7f       	andi	r25, 0xF9	; 249
 978:	b9 2e       	mov	r11, r25
 97a:	8f 36       	cpi	r24, 0x6F	; 111
 97c:	c1 f0       	breq	.+48     	; 0x9ae <vfprintf+0x25e>
 97e:	18 f4       	brcc	.+6      	; 0x986 <vfprintf+0x236>
 980:	88 35       	cpi	r24, 0x58	; 88
 982:	79 f0       	breq	.+30     	; 0x9a2 <vfprintf+0x252>
 984:	ae c0       	rjmp	.+348    	; 0xae2 <vfprintf+0x392>
 986:	80 37       	cpi	r24, 0x70	; 112
 988:	19 f0       	breq	.+6      	; 0x990 <vfprintf+0x240>
 98a:	88 37       	cpi	r24, 0x78	; 120
 98c:	21 f0       	breq	.+8      	; 0x996 <vfprintf+0x246>
 98e:	a9 c0       	rjmp	.+338    	; 0xae2 <vfprintf+0x392>
 990:	e9 2f       	mov	r30, r25
 992:	e0 61       	ori	r30, 0x10	; 16
 994:	be 2e       	mov	r11, r30
 996:	b4 fe       	sbrs	r11, 4
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <vfprintf+0x264>
 99a:	fb 2d       	mov	r31, r11
 99c:	f4 60       	ori	r31, 0x04	; 4
 99e:	bf 2e       	mov	r11, r31
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <vfprintf+0x264>
 9a2:	34 fe       	sbrs	r3, 4
 9a4:	0a c0       	rjmp	.+20     	; 0x9ba <vfprintf+0x26a>
 9a6:	29 2f       	mov	r18, r25
 9a8:	26 60       	ori	r18, 0x06	; 6
 9aa:	b2 2e       	mov	r11, r18
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <vfprintf+0x26a>
 9ae:	28 e0       	ldi	r18, 0x08	; 8
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <vfprintf+0x26e>
 9b4:	20 e1       	ldi	r18, 0x10	; 16
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x26e>
 9ba:	20 e1       	ldi	r18, 0x10	; 16
 9bc:	32 e0       	ldi	r19, 0x02	; 2
 9be:	f8 01       	movw	r30, r16
 9c0:	b7 fe       	sbrs	r11, 7
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <vfprintf+0x282>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	82 81       	ldd	r24, Z+2	; 0x02
 9ca:	93 81       	ldd	r25, Z+3	; 0x03
 9cc:	0c 5f       	subi	r16, 0xFC	; 252
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <vfprintf+0x28e>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 5f       	subi	r16, 0xFE	; 254
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	a3 01       	movw	r20, r6
 9e0:	db d0       	rcall	.+438    	; 0xb98 <__ultoa_invert>
 9e2:	88 2e       	mov	r8, r24
 9e4:	86 18       	sub	r8, r6
 9e6:	fb 2d       	mov	r31, r11
 9e8:	ff 77       	andi	r31, 0x7F	; 127
 9ea:	3f 2e       	mov	r3, r31
 9ec:	36 fe       	sbrs	r3, 6
 9ee:	0d c0       	rjmp	.+26     	; 0xa0a <vfprintf+0x2ba>
 9f0:	23 2d       	mov	r18, r3
 9f2:	2e 7f       	andi	r18, 0xFE	; 254
 9f4:	a2 2e       	mov	r10, r18
 9f6:	89 14       	cp	r8, r9
 9f8:	58 f4       	brcc	.+22     	; 0xa10 <vfprintf+0x2c0>
 9fa:	34 fe       	sbrs	r3, 4
 9fc:	0b c0       	rjmp	.+22     	; 0xa14 <vfprintf+0x2c4>
 9fe:	32 fc       	sbrc	r3, 2
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <vfprintf+0x2c4>
 a02:	83 2d       	mov	r24, r3
 a04:	8e 7e       	andi	r24, 0xEE	; 238
 a06:	a8 2e       	mov	r10, r24
 a08:	05 c0       	rjmp	.+10     	; 0xa14 <vfprintf+0x2c4>
 a0a:	b8 2c       	mov	r11, r8
 a0c:	a3 2c       	mov	r10, r3
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <vfprintf+0x2c6>
 a10:	b8 2c       	mov	r11, r8
 a12:	01 c0       	rjmp	.+2      	; 0xa16 <vfprintf+0x2c6>
 a14:	b9 2c       	mov	r11, r9
 a16:	a4 fe       	sbrs	r10, 4
 a18:	0f c0       	rjmp	.+30     	; 0xa38 <vfprintf+0x2e8>
 a1a:	fe 01       	movw	r30, r28
 a1c:	e8 0d       	add	r30, r8
 a1e:	f1 1d       	adc	r31, r1
 a20:	80 81       	ld	r24, Z
 a22:	80 33       	cpi	r24, 0x30	; 48
 a24:	21 f4       	brne	.+8      	; 0xa2e <vfprintf+0x2de>
 a26:	9a 2d       	mov	r25, r10
 a28:	99 7e       	andi	r25, 0xE9	; 233
 a2a:	a9 2e       	mov	r10, r25
 a2c:	09 c0       	rjmp	.+18     	; 0xa40 <vfprintf+0x2f0>
 a2e:	a2 fe       	sbrs	r10, 2
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <vfprintf+0x2ee>
 a32:	b3 94       	inc	r11
 a34:	b3 94       	inc	r11
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <vfprintf+0x2f0>
 a38:	8a 2d       	mov	r24, r10
 a3a:	86 78       	andi	r24, 0x86	; 134
 a3c:	09 f0       	breq	.+2      	; 0xa40 <vfprintf+0x2f0>
 a3e:	b3 94       	inc	r11
 a40:	a3 fc       	sbrc	r10, 3
 a42:	10 c0       	rjmp	.+32     	; 0xa64 <vfprintf+0x314>
 a44:	a0 fe       	sbrs	r10, 0
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <vfprintf+0x304>
 a48:	b2 14       	cp	r11, r2
 a4a:	80 f4       	brcc	.+32     	; 0xa6c <vfprintf+0x31c>
 a4c:	28 0c       	add	r2, r8
 a4e:	92 2c       	mov	r9, r2
 a50:	9b 18       	sub	r9, r11
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <vfprintf+0x31e>
 a54:	b2 14       	cp	r11, r2
 a56:	58 f4       	brcc	.+22     	; 0xa6e <vfprintf+0x31e>
 a58:	b6 01       	movw	r22, r12
 a5a:	80 e2       	ldi	r24, 0x20	; 32
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	60 d0       	rcall	.+192    	; 0xb20 <fputc>
 a60:	b3 94       	inc	r11
 a62:	f8 cf       	rjmp	.-16     	; 0xa54 <vfprintf+0x304>
 a64:	b2 14       	cp	r11, r2
 a66:	18 f4       	brcc	.+6      	; 0xa6e <vfprintf+0x31e>
 a68:	2b 18       	sub	r2, r11
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0x320>
 a6c:	98 2c       	mov	r9, r8
 a6e:	21 2c       	mov	r2, r1
 a70:	a4 fe       	sbrs	r10, 4
 a72:	0f c0       	rjmp	.+30     	; 0xa92 <vfprintf+0x342>
 a74:	b6 01       	movw	r22, r12
 a76:	80 e3       	ldi	r24, 0x30	; 48
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	52 d0       	rcall	.+164    	; 0xb20 <fputc>
 a7c:	a2 fe       	sbrs	r10, 2
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <vfprintf+0x35c>
 a80:	a1 fc       	sbrc	r10, 1
 a82:	03 c0       	rjmp	.+6      	; 0xa8a <vfprintf+0x33a>
 a84:	88 e7       	ldi	r24, 0x78	; 120
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <vfprintf+0x33e>
 a8a:	88 e5       	ldi	r24, 0x58	; 88
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	b6 01       	movw	r22, r12
 a90:	0c c0       	rjmp	.+24     	; 0xaaa <vfprintf+0x35a>
 a92:	8a 2d       	mov	r24, r10
 a94:	86 78       	andi	r24, 0x86	; 134
 a96:	51 f0       	breq	.+20     	; 0xaac <vfprintf+0x35c>
 a98:	a1 fe       	sbrs	r10, 1
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <vfprintf+0x350>
 a9c:	8b e2       	ldi	r24, 0x2B	; 43
 a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <vfprintf+0x352>
 aa0:	80 e2       	ldi	r24, 0x20	; 32
 aa2:	a7 fc       	sbrc	r10, 7
 aa4:	8d e2       	ldi	r24, 0x2D	; 45
 aa6:	b6 01       	movw	r22, r12
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	3a d0       	rcall	.+116    	; 0xb20 <fputc>
 aac:	89 14       	cp	r8, r9
 aae:	30 f4       	brcc	.+12     	; 0xabc <vfprintf+0x36c>
 ab0:	b6 01       	movw	r22, r12
 ab2:	80 e3       	ldi	r24, 0x30	; 48
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	34 d0       	rcall	.+104    	; 0xb20 <fputc>
 ab8:	9a 94       	dec	r9
 aba:	f8 cf       	rjmp	.-16     	; 0xaac <vfprintf+0x35c>
 abc:	8a 94       	dec	r8
 abe:	f3 01       	movw	r30, r6
 ac0:	e8 0d       	add	r30, r8
 ac2:	f1 1d       	adc	r31, r1
 ac4:	80 81       	ld	r24, Z
 ac6:	b6 01       	movw	r22, r12
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	2a d0       	rcall	.+84     	; 0xb20 <fputc>
 acc:	81 10       	cpse	r8, r1
 ace:	f6 cf       	rjmp	.-20     	; 0xabc <vfprintf+0x36c>
 ad0:	22 20       	and	r2, r2
 ad2:	09 f4       	brne	.+2      	; 0xad6 <vfprintf+0x386>
 ad4:	4e ce       	rjmp	.-868    	; 0x772 <vfprintf+0x22>
 ad6:	b6 01       	movw	r22, r12
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	21 d0       	rcall	.+66     	; 0xb20 <fputc>
 ade:	2a 94       	dec	r2
 ae0:	f7 cf       	rjmp	.-18     	; 0xad0 <vfprintf+0x380>
 ae2:	f6 01       	movw	r30, r12
 ae4:	86 81       	ldd	r24, Z+6	; 0x06
 ae6:	97 81       	ldd	r25, Z+7	; 0x07
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <vfprintf+0x39e>
 aea:	8f ef       	ldi	r24, 0xFF	; 255
 aec:	9f ef       	ldi	r25, 0xFF	; 255
 aee:	2b 96       	adiw	r28, 0x0b	; 11
 af0:	e2 e1       	ldi	r30, 0x12	; 18
 af2:	e9 c0       	rjmp	.+466    	; 0xcc6 <__epilogue_restores__>

00000af4 <strnlen_P>:
 af4:	fc 01       	movw	r30, r24
 af6:	05 90       	lpm	r0, Z+
 af8:	61 50       	subi	r22, 0x01	; 1
 afa:	70 40       	sbci	r23, 0x00	; 0
 afc:	01 10       	cpse	r0, r1
 afe:	d8 f7       	brcc	.-10     	; 0xaf6 <strnlen_P+0x2>
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	8e 0f       	add	r24, r30
 b06:	9f 1f       	adc	r25, r31
 b08:	08 95       	ret

00000b0a <strnlen>:
 b0a:	fc 01       	movw	r30, r24
 b0c:	61 50       	subi	r22, 0x01	; 1
 b0e:	70 40       	sbci	r23, 0x00	; 0
 b10:	01 90       	ld	r0, Z+
 b12:	01 10       	cpse	r0, r1
 b14:	d8 f7       	brcc	.-10     	; 0xb0c <strnlen+0x2>
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	8e 0f       	add	r24, r30
 b1c:	9f 1f       	adc	r25, r31
 b1e:	08 95       	ret

00000b20 <fputc>:
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	fb 01       	movw	r30, r22
 b2a:	23 81       	ldd	r18, Z+3	; 0x03
 b2c:	21 fd       	sbrc	r18, 1
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <fputc+0x16>
 b30:	8f ef       	ldi	r24, 0xFF	; 255
 b32:	9f ef       	ldi	r25, 0xFF	; 255
 b34:	2c c0       	rjmp	.+88     	; 0xb8e <fputc+0x6e>
 b36:	22 ff       	sbrs	r18, 2
 b38:	16 c0       	rjmp	.+44     	; 0xb66 <fputc+0x46>
 b3a:	46 81       	ldd	r20, Z+6	; 0x06
 b3c:	57 81       	ldd	r21, Z+7	; 0x07
 b3e:	24 81       	ldd	r18, Z+4	; 0x04
 b40:	35 81       	ldd	r19, Z+5	; 0x05
 b42:	42 17       	cp	r20, r18
 b44:	53 07       	cpc	r21, r19
 b46:	44 f4       	brge	.+16     	; 0xb58 <fputc+0x38>
 b48:	a0 81       	ld	r26, Z
 b4a:	b1 81       	ldd	r27, Z+1	; 0x01
 b4c:	9d 01       	movw	r18, r26
 b4e:	2f 5f       	subi	r18, 0xFF	; 255
 b50:	3f 4f       	sbci	r19, 0xFF	; 255
 b52:	31 83       	std	Z+1, r19	; 0x01
 b54:	20 83       	st	Z, r18
 b56:	8c 93       	st	X, r24
 b58:	26 81       	ldd	r18, Z+6	; 0x06
 b5a:	37 81       	ldd	r19, Z+7	; 0x07
 b5c:	2f 5f       	subi	r18, 0xFF	; 255
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	37 83       	std	Z+7, r19	; 0x07
 b62:	26 83       	std	Z+6, r18	; 0x06
 b64:	14 c0       	rjmp	.+40     	; 0xb8e <fputc+0x6e>
 b66:	8b 01       	movw	r16, r22
 b68:	ec 01       	movw	r28, r24
 b6a:	fb 01       	movw	r30, r22
 b6c:	00 84       	ldd	r0, Z+8	; 0x08
 b6e:	f1 85       	ldd	r31, Z+9	; 0x09
 b70:	e0 2d       	mov	r30, r0
 b72:	09 95       	icall
 b74:	89 2b       	or	r24, r25
 b76:	e1 f6       	brne	.-72     	; 0xb30 <fputc+0x10>
 b78:	d8 01       	movw	r26, r16
 b7a:	16 96       	adiw	r26, 0x06	; 6
 b7c:	8d 91       	ld	r24, X+
 b7e:	9c 91       	ld	r25, X
 b80:	17 97       	sbiw	r26, 0x07	; 7
 b82:	01 96       	adiw	r24, 0x01	; 1
 b84:	17 96       	adiw	r26, 0x07	; 7
 b86:	9c 93       	st	X, r25
 b88:	8e 93       	st	-X, r24
 b8a:	16 97       	sbiw	r26, 0x06	; 6
 b8c:	ce 01       	movw	r24, r28
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	0f 91       	pop	r16
 b96:	08 95       	ret

00000b98 <__ultoa_invert>:
 b98:	fa 01       	movw	r30, r20
 b9a:	aa 27       	eor	r26, r26
 b9c:	28 30       	cpi	r18, 0x08	; 8
 b9e:	51 f1       	breq	.+84     	; 0xbf4 <__ultoa_invert+0x5c>
 ba0:	20 31       	cpi	r18, 0x10	; 16
 ba2:	81 f1       	breq	.+96     	; 0xc04 <__ultoa_invert+0x6c>
 ba4:	e8 94       	clt
 ba6:	6f 93       	push	r22
 ba8:	6e 7f       	andi	r22, 0xFE	; 254
 baa:	6e 5f       	subi	r22, 0xFE	; 254
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	af 4f       	sbci	r26, 0xFF	; 255
 bb4:	b1 e0       	ldi	r27, 0x01	; 1
 bb6:	3e d0       	rcall	.+124    	; 0xc34 <__ultoa_invert+0x9c>
 bb8:	b4 e0       	ldi	r27, 0x04	; 4
 bba:	3c d0       	rcall	.+120    	; 0xc34 <__ultoa_invert+0x9c>
 bbc:	67 0f       	add	r22, r23
 bbe:	78 1f       	adc	r23, r24
 bc0:	89 1f       	adc	r24, r25
 bc2:	9a 1f       	adc	r25, r26
 bc4:	a1 1d       	adc	r26, r1
 bc6:	68 0f       	add	r22, r24
 bc8:	79 1f       	adc	r23, r25
 bca:	8a 1f       	adc	r24, r26
 bcc:	91 1d       	adc	r25, r1
 bce:	a1 1d       	adc	r26, r1
 bd0:	6a 0f       	add	r22, r26
 bd2:	71 1d       	adc	r23, r1
 bd4:	81 1d       	adc	r24, r1
 bd6:	91 1d       	adc	r25, r1
 bd8:	a1 1d       	adc	r26, r1
 bda:	20 d0       	rcall	.+64     	; 0xc1c <__ultoa_invert+0x84>
 bdc:	09 f4       	brne	.+2      	; 0xbe0 <__ultoa_invert+0x48>
 bde:	68 94       	set
 be0:	3f 91       	pop	r19
 be2:	2a e0       	ldi	r18, 0x0A	; 10
 be4:	26 9f       	mul	r18, r22
 be6:	11 24       	eor	r1, r1
 be8:	30 19       	sub	r19, r0
 bea:	30 5d       	subi	r19, 0xD0	; 208
 bec:	31 93       	st	Z+, r19
 bee:	de f6       	brtc	.-74     	; 0xba6 <__ultoa_invert+0xe>
 bf0:	cf 01       	movw	r24, r30
 bf2:	08 95       	ret
 bf4:	46 2f       	mov	r20, r22
 bf6:	47 70       	andi	r20, 0x07	; 7
 bf8:	40 5d       	subi	r20, 0xD0	; 208
 bfa:	41 93       	st	Z+, r20
 bfc:	b3 e0       	ldi	r27, 0x03	; 3
 bfe:	0f d0       	rcall	.+30     	; 0xc1e <__ultoa_invert+0x86>
 c00:	c9 f7       	brne	.-14     	; 0xbf4 <__ultoa_invert+0x5c>
 c02:	f6 cf       	rjmp	.-20     	; 0xbf0 <__ultoa_invert+0x58>
 c04:	46 2f       	mov	r20, r22
 c06:	4f 70       	andi	r20, 0x0F	; 15
 c08:	40 5d       	subi	r20, 0xD0	; 208
 c0a:	4a 33       	cpi	r20, 0x3A	; 58
 c0c:	18 f0       	brcs	.+6      	; 0xc14 <__ultoa_invert+0x7c>
 c0e:	49 5d       	subi	r20, 0xD9	; 217
 c10:	31 fd       	sbrc	r19, 1
 c12:	40 52       	subi	r20, 0x20	; 32
 c14:	41 93       	st	Z+, r20
 c16:	02 d0       	rcall	.+4      	; 0xc1c <__ultoa_invert+0x84>
 c18:	a9 f7       	brne	.-22     	; 0xc04 <__ultoa_invert+0x6c>
 c1a:	ea cf       	rjmp	.-44     	; 0xbf0 <__ultoa_invert+0x58>
 c1c:	b4 e0       	ldi	r27, 0x04	; 4
 c1e:	a6 95       	lsr	r26
 c20:	97 95       	ror	r25
 c22:	87 95       	ror	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	ba 95       	dec	r27
 c2a:	c9 f7       	brne	.-14     	; 0xc1e <__ultoa_invert+0x86>
 c2c:	00 97       	sbiw	r24, 0x00	; 0
 c2e:	61 05       	cpc	r22, r1
 c30:	71 05       	cpc	r23, r1
 c32:	08 95       	ret
 c34:	9b 01       	movw	r18, r22
 c36:	ac 01       	movw	r20, r24
 c38:	0a 2e       	mov	r0, r26
 c3a:	06 94       	lsr	r0
 c3c:	57 95       	ror	r21
 c3e:	47 95       	ror	r20
 c40:	37 95       	ror	r19
 c42:	27 95       	ror	r18
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0xa2>
 c48:	62 0f       	add	r22, r18
 c4a:	73 1f       	adc	r23, r19
 c4c:	84 1f       	adc	r24, r20
 c4e:	95 1f       	adc	r25, r21
 c50:	a0 1d       	adc	r26, r0
 c52:	08 95       	ret

00000c54 <eeprom_read_byte>:
 c54:	e1 99       	sbic	0x1c, 1	; 28
 c56:	fe cf       	rjmp	.-4      	; 0xc54 <eeprom_read_byte>
 c58:	9f bb       	out	0x1f, r25	; 31
 c5a:	8e bb       	out	0x1e, r24	; 30
 c5c:	e0 9a       	sbi	0x1c, 0	; 28
 c5e:	99 27       	eor	r25, r25
 c60:	8d b3       	in	r24, 0x1d	; 29
 c62:	08 95       	ret

00000c64 <eeprom_read_word>:
 c64:	a8 e1       	ldi	r26, 0x18	; 24
 c66:	b0 e0       	ldi	r27, 0x00	; 0
 c68:	42 e0       	ldi	r20, 0x02	; 2
 c6a:	50 e0       	ldi	r21, 0x00	; 0
 c6c:	02 c0       	rjmp	.+4      	; 0xc72 <eeprom_read_blraw>

00000c6e <eeprom_read_block>:
 c6e:	dc 01       	movw	r26, r24
 c70:	cb 01       	movw	r24, r22

00000c72 <eeprom_read_blraw>:
 c72:	fc 01       	movw	r30, r24
 c74:	e1 99       	sbic	0x1c, 1	; 28
 c76:	fe cf       	rjmp	.-4      	; 0xc74 <eeprom_read_blraw+0x2>
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <eeprom_read_blraw+0x14>
 c7a:	ff bb       	out	0x1f, r31	; 31
 c7c:	ee bb       	out	0x1e, r30	; 30
 c7e:	e0 9a       	sbi	0x1c, 0	; 28
 c80:	31 96       	adiw	r30, 0x01	; 1
 c82:	0d b2       	in	r0, 0x1d	; 29
 c84:	0d 92       	st	X+, r0
 c86:	41 50       	subi	r20, 0x01	; 1
 c88:	50 40       	sbci	r21, 0x00	; 0
 c8a:	b8 f7       	brcc	.-18     	; 0xc7a <eeprom_read_blraw+0x8>
 c8c:	08 95       	ret

00000c8e <__prologue_saves__>:
 c8e:	2f 92       	push	r2
 c90:	3f 92       	push	r3
 c92:	4f 92       	push	r4
 c94:	5f 92       	push	r5
 c96:	6f 92       	push	r6
 c98:	7f 92       	push	r7
 c9a:	8f 92       	push	r8
 c9c:	9f 92       	push	r9
 c9e:	af 92       	push	r10
 ca0:	bf 92       	push	r11
 ca2:	cf 92       	push	r12
 ca4:	df 92       	push	r13
 ca6:	ef 92       	push	r14
 ca8:	ff 92       	push	r15
 caa:	0f 93       	push	r16
 cac:	1f 93       	push	r17
 cae:	cf 93       	push	r28
 cb0:	df 93       	push	r29
 cb2:	cd b7       	in	r28, 0x3d	; 61
 cb4:	de b7       	in	r29, 0x3e	; 62
 cb6:	ca 1b       	sub	r28, r26
 cb8:	db 0b       	sbc	r29, r27
 cba:	0f b6       	in	r0, 0x3f	; 63
 cbc:	f8 94       	cli
 cbe:	de bf       	out	0x3e, r29	; 62
 cc0:	0f be       	out	0x3f, r0	; 63
 cc2:	cd bf       	out	0x3d, r28	; 61
 cc4:	09 94       	ijmp

00000cc6 <__epilogue_restores__>:
 cc6:	2a 88       	ldd	r2, Y+18	; 0x12
 cc8:	39 88       	ldd	r3, Y+17	; 0x11
 cca:	48 88       	ldd	r4, Y+16	; 0x10
 ccc:	5f 84       	ldd	r5, Y+15	; 0x0f
 cce:	6e 84       	ldd	r6, Y+14	; 0x0e
 cd0:	7d 84       	ldd	r7, Y+13	; 0x0d
 cd2:	8c 84       	ldd	r8, Y+12	; 0x0c
 cd4:	9b 84       	ldd	r9, Y+11	; 0x0b
 cd6:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd8:	b9 84       	ldd	r11, Y+9	; 0x09
 cda:	c8 84       	ldd	r12, Y+8	; 0x08
 cdc:	df 80       	ldd	r13, Y+7	; 0x07
 cde:	ee 80       	ldd	r14, Y+6	; 0x06
 ce0:	fd 80       	ldd	r15, Y+5	; 0x05
 ce2:	0c 81       	ldd	r16, Y+4	; 0x04
 ce4:	1b 81       	ldd	r17, Y+3	; 0x03
 ce6:	aa 81       	ldd	r26, Y+2	; 0x02
 ce8:	b9 81       	ldd	r27, Y+1	; 0x01
 cea:	ce 0f       	add	r28, r30
 cec:	d1 1d       	adc	r29, r1
 cee:	0f b6       	in	r0, 0x3f	; 63
 cf0:	f8 94       	cli
 cf2:	de bf       	out	0x3e, r29	; 62
 cf4:	0f be       	out	0x3f, r0	; 63
 cf6:	cd bf       	out	0x3d, r28	; 61
 cf8:	ed 01       	movw	r28, r26
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
